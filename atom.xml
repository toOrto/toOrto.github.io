<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[toOrto’s 南瓜屋]]></title>
  <subtitle><![CDATA[Wake up Up UP :)]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://to0rto.com/"/>
  <updated>2015-05-20T02:14:27.000Z</updated>
  <id>http://to0rto.com/</id>
  
  <author>
    <name><![CDATA[toOrto]]></name>
    <email><![CDATA[toorto#foxmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[python Challenge 5]]></title>
    <link href="http://to0rto.com/2015/05/20/python-Challenge-5/"/>
    <id>http://to0rto.com/2015/05/20/python-Challenge-5/</id>
    <published>2015-05-20T01:48:36.000Z</published>
    <updated>2015-05-20T02:14:27.000Z</updated>
    <content type="html"><![CDATA[<p>过了好长时间了，又来了。。</p>
<h2 id="基础学习">基础学习</h2><p>主要是pickle的使用。说起来用pickle的原因还挺复杂的。<br>但使用起来就只有那四个函数：</p>
<p>Functions:</p>
<pre><code><span class="function"><span class="title">dump</span><span class="params">(object, file)</span></span>
<span class="function"><span class="title">dumps</span><span class="params">(object)</span></span> -&gt; string
<span class="function"><span class="title">load</span><span class="params">(file)</span></span> -&gt; <span class="tag">object</span>
<span class="function"><span class="title">loads</span><span class="params">(string)</span></span> -&gt; object
</code></pre><p>分别是<br>object—&gt;file 将object写入到文件  </p>
<p>object—&gt;string 将object写入到字符串</p>
<p>file—&gt;object 从文件中读出object</p>
<p>string—&gt;object 从字符串中读出object</p>
<h2 id="主要思路">主要思路</h2><p>显示源代码<br><code>&lt;peakhell src=&quot;banner.p&quot;/&gt;</code><br>1.下载banner.p文件<br>2.通过pickle的load()读出object<br>3.发现都是＃和“ ”<br>4.按次数打印＃和“ ”</p>
<h2 id="实现代码">实现代码</h2><pre><code>import urllib2
import cPickle as pickle

print <span class="string">"downloading the file banner.p"</span>
url = <span class="string">"http://www.pythonchallenge.com/pc/def/banner.p"</span>
f = urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(url)</span></span>
data = f.<span class="function"><span class="title">read</span><span class="params">()</span></span>
with <span class="function"><span class="title">open</span><span class="params">(<span class="string">"banner2.p"</span>,<span class="string">"wb"</span>)</span></span> as <span class="tag">code</span>:
        <span class="tag">code</span>.<span class="function"><span class="title">write</span><span class="params">(data)</span></span>
ff = <span class="function"><span class="title">file</span><span class="params">(<span class="string">"banner2.p"</span>,<span class="string">"rb"</span>)</span></span>
rr = pickle.<span class="function"><span class="title">load</span><span class="params">(ff)</span></span>

<span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">xrange</span><span class="params">(<span class="number">0</span>,len(rr)</span></span>):
        print <span class="string">"\n"</span>
        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="function"><span class="title">xrange</span><span class="params">(<span class="number">0</span>,len(rr[i])</span></span>):
                print rr[i][j][<span class="number">0</span>]*rr[i][j][<span class="number">1</span>],

ff.<span class="function"><span class="title">close</span><span class="params">()</span></span>
</code></pre><p>最后得到如下结果：  channel  </p>
<p>欢迎大家批评指正~</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>过了好长时间了，又来了。。</p>
<h2 id="基础学习">基础学习</h2><p>主要是pickle的使用。说起来用pickle的原因还挺复杂的。<br>但使用起来就只有那四个函数：</p>
<p>Functions:</p>
<pre><code><span cla]]>
    </summary>
    
      <category term="learn" scheme="http://to0rto.com/tags/learn/"/>
    
      <category term="python" scheme="http://to0rto.com/tags/python/"/>
    
      <category term="python" scheme="http://to0rto.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Masterkey #9950697 原理与测试]]></title>
    <link href="http://to0rto.com/2015/05/14/Android-Master-Key-9950697/"/>
    <id>http://to0rto.com/2015/05/14/Android-Master-Key-9950697/</id>
    <published>2015-05-14T14:32:16.000Z</published>
    <updated>2015-05-14T14:32:16.000Z</updated>
    <content type="html"><![CDATA[<p><strong>注: 本文谢绝任何形式的转载，仅供学习交流</strong></p>
<h2 id="漏洞简介">漏洞简介</h2><p>该漏洞同样可以绕过android签名机制，即在合法应用中注入恶意代码而不被发现。  </p>
<h2 id="漏洞原理">漏洞原理</h2><p>由于在解析文件数据时，是通过文件长度偏移来计算文件数据的偏移地址，所以若该偏移地址被改变，就可以控制其取出的文件数据。  <a id="more"></a></p>
<p>Local file header 有一个字段用来表示文件名长度的，类型为ushort。最大为64K，<br>Central Directory中也有一个字段是用来表示文件名长度的，两者是相互对应的。<br>正常情况下，两者是相同的。<br>而我们现在可以将Local file header中的文件名长度改得足够大(比如64K)，    </p>
<p>则当JAVA进行解析时，会按Central Directory结构中的长度（正常长度，比如我们要修改classes.dex文件，长度就位0x0B）来解析出数据，<br>而C++则会按Local file header中的长度（被改成64k）来解析出文件数据。    </p>
<p>这样我们在相对偏移为64K的地方加上我们的恶意APK，则在实际执行时，将执行我们的恶意代码。</p>
<h2 id="漏洞测试">漏洞测试</h2><p>已经有人利用python脚本实现修改文件长度，修改二进制文件来生成特定的apk文件。本文利用网上的POC，生成的apk文件可以绕过签名并执行恶意代码，测试版本为Android4.2.2，包含该漏洞。安装成功，执行恶意代码（本测试为自己添加的log）如下图所示：<br><img src="http://7xilbx.com1.z0.glb.clouddn.com/masterkey3_4.2.2.png" alt="image"><br>Android4.4版本，该漏洞已补。测试结果如下图所示：<br><img src="http://7xilbx.com1.z0.glb.clouddn.com/masterkey3_4.4.png" alt="image">    </p>
<p>参考saurik的一系列文章。<br>灰常感谢～<br><strong>注: 本文谢绝任何形式的转载，仅供学习交流</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>注: 本文谢绝任何形式的转载，仅供学习交流</strong></p>
<h2 id="漏洞简介">漏洞简介</h2><p>该漏洞同样可以绕过android签名机制，即在合法应用中注入恶意代码而不被发现。  </p>
<h2 id="漏洞原理">漏洞原理</h2><p>由于在解析文件数据时，是通过文件长度偏移来计算文件数据的偏移地址，所以若该偏移地址被改变，就可以控制其取出的文件数据。]]>
    
    </summary>
    
      <category term="Vuln" scheme="http://to0rto.com/tags/Vuln/"/>
    
      <category term="android" scheme="http://to0rto.com/tags/android/"/>
    
      <category term="Android" scheme="http://to0rto.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Masterkey #9695860 原理简述与测试]]></title>
    <link href="http://to0rto.com/2015/04/16/Android-Masterkey-9695860/"/>
    <id>http://to0rto.com/2015/04/16/Android-Masterkey-9695860/</id>
    <published>2015-04-16T05:12:54.000Z</published>
    <updated>2015-05-14T14:29:22.000Z</updated>
    <content type="html"><![CDATA[<p><strong>注: 本文谢绝任何形式的转载，仅供学习交流</strong></p>
<h2 id="漏洞简介">漏洞简介</h2><p>本漏洞可以实现任意修改dex文件，绕过Android签名验证机制，即在合法应用中注入恶意代码而不被发现</p>
<h2 id="漏洞原理简述">漏洞原理简述</h2><p>android在解析Zip包时，由于JAVA和C在处理Extra field length时不同，所以产生了这个漏洞。JAVA将Extra field length视为有符号数，而C++将其视为无符号数。所以产生了两种解析方式。<a id="more"></a>    </p>
<h2 id="漏洞测试">漏洞测试</h2><p>首先修改Central directory file header中classes.dex前一个结构的Extra field length为0x8000，如下图绿色框框中所示(前面23 00代表classes.dex前一个结构的文件名长度，即res/drawable-xxhdpi/ic_launcher.png的长度)。<br>这样，当JAVA解析时，即安装时，解析0x8000为负数，则跳过。<br>当C解析时，即加载时，解析0X8000为正数，则会跳过0x8000这么长的区域，因为它将其视为Extra field，跳到下一结构的起始处。<br>修改原来的classes.dex的Extra field length为0x39。因为恶意classes.dex结构（Central directory）长度为0x39。则当解析时会跳过其后紧跟的恶意classes.dex。跳到下一个正常的结构中。<br>下面是两种解析方式：<br>JAVA:<br>…—&gt;res/drawable-xxhdpi/ic_launcher.png—&gt;classes.dex(原来)—&gt;META-INF/MANIFEST—&gt;…—&gt;EOCD(1)<br>C++：<br>…—&gt;res/drawable-xxhdpi/ic_launcher.png—&gt;classes.dex(恶意)—&gt;META-INF/MANIFEST—&gt;…—&gt;EOCD(2)</p>
<p>如图所示，<img src="http://7xilbx.com1.z0.glb.clouddn.com/masterkey22.png" alt="image"></p>
<p>复制从classes.dex（恶意）开始，一直到最后的所有十六进制，粘贴到偏移0x8000的位置。  </p>
<p>最后，修改末尾End of central directory record (EOCD)保证可以正常的索引到前面的结构。<strong>共两处</strong>。一处是EOCD（1）即原APK自己的结尾，另一处为复制得到的，即EOCD(2)。其中0C 00表示文件数，原来是0D，改为0C，因为开始多了一个classes.dex，现在将其隐藏。第二处为Size of central directory (bytes)，计算方法可看wiki百科对zip文件格式的说明。</p>
<p>修改字段如图所示<img src="http://7xilbx.com1.z0.glb.clouddn.com/masterkey2.png" alt="image"><br>最后测试结果，仍然可以打出自己修改添加的log，就不附图了。</p>
<p>参考saurik的一系列文章。<br>非常感谢<br><strong>注: 本文谢绝任何形式的转载，仅供学习交流</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>注: 本文谢绝任何形式的转载，仅供学习交流</strong></p>
<h2 id="漏洞简介">漏洞简介</h2><p>本漏洞可以实现任意修改dex文件，绕过Android签名验证机制，即在合法应用中注入恶意代码而不被发现</p>
<h2 id="漏洞原理简述">漏洞原理简述</h2><p>android在解析Zip包时，由于JAVA和C在处理Extra field length时不同，所以产生了这个漏洞。JAVA将Extra field length视为有符号数，而C++将其视为无符号数。所以产生了两种解析方式。]]>
    
    </summary>
    
      <category term="Vuln" scheme="http://to0rto.com/tags/Vuln/"/>
    
      <category term="android" scheme="http://to0rto.com/tags/android/"/>
    
      <category term="Android" scheme="http://to0rto.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android masterkey(8219321)原理分析与测试]]></title>
    <link href="http://to0rto.com/2015/04/15/Android-masterkey-8219321/"/>
    <id>http://to0rto.com/2015/04/15/Android-masterkey-8219321/</id>
    <published>2015-04-15T02:55:16.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="漏洞介绍">漏洞介绍</h2><p>该漏洞功能是可以绕过android签名验证，安装恶意apk。  <a id="more"></a></p>
<h2 id="漏洞原理">漏洞原理</h2><p>由于Android没有考虑到APK压缩文件中重复文件名的问题，而且安装时验证方式与加载执行时的方式不同，导致可以通过构造相同文件名的不同文件来绕过签名验证。  </p>
<h2 id="漏洞测试">漏洞测试</h2><p>通过7z(或者脚本)将修改之后的classes.dex也压缩到原APK中，并使修改的classes.dex在原classes.dex之前,这样就可以绕过签名验证了。  </p>
<p>测试结果：打印出自己修改的log    </p>
<p><img src="http://7xilbx.com1.z0.glb.clouddn.com/MasterKey1.png" alt="result">  </p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="漏洞介绍">漏洞介绍</h2><p>该漏洞功能是可以绕过android签名验证，安装恶意apk。]]>
    
    </summary>
    
      <category term="Vuln" scheme="http://to0rto.com/tags/Vuln/"/>
    
      <category term="android" scheme="http://to0rto.com/tags/android/"/>
    
      <category term="Android" scheme="http://to0rto.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[modify the APK]]></title>
    <link href="http://to0rto.com/2015/04/14/modify-the-APK/"/>
    <id>http://to0rto.com/2015/04/14/modify-the-APK/</id>
    <published>2015-04-14T07:27:17.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="修改APK文件遇到的一些问题">修改APK文件遇到的一些问题</h2><p>问题1：<br>adb install xxx.apk时，出现：</p>
<p><code>Zip EOCD: expected &gt;= 22 bytes, found 21</code></p>
<p>解决方法：</p>
<p>该问题是由于End of central directory record (EOCD)总长度不对造成的，笔者是由于少了一位0x00造成的。EOCD总长度本应该是22位，缺只有21位，则会报错。修改方法，检查缺失字段，并补齐。<br><a id="more"></a><br>问题2：<br><code>Whoops: didn&#39;t find expected signature read_central_directory_entry failed</code><br><code>file &#39;xxx.apk&#39; is not a valid zip file rm failed for /data/local/tmp/xxx.apk,</code><br><code>No such file or directory</code></p>
<p>解决办法：  </p>
<p>该APK损坏了，笔者用打开压缩文件的软件也无法打开该APK。最后发现是Central directory entry出了问题。  </p>
<p>问题3：  </p>
<p><code>Android INSTALL_FAILED_UID_CHANGED</code>  </p>
<p>解决办法：<br>删除<code>data/data/com.example.helloworld</code>即可。<br>问题4：<br><code>[INSTALL_FAILED_DEXOPT]</code><br>解决办法：<br>SDK版本不匹配的问题  </p>
<h2 id="编写体积小的helloworld">编写体积小的helloworld</h2><ol>
<li>首先Mini SDK &lt; 11, TargetSDK &gt; 11</li>
<li>移除appcompat_v7库</li>
<li>取消Android Private Libraries前面的勾</li>
<li>上一步带来的编译错误   </li>
</ol>
<p>问题1：<br><code>ActionBarActivity cannot be resolved to a type。</code><br>解决方法：  </p>
<p><code>MainActivity继承自ActionBarActivity，将其改为Activity并按提示添加</code><br><code>import android.app.Activity;</code>  </p>
<p>问题2：<br><code>R cannot be resolved to a variable。</code><br>解决方法：  </p>
<pre><code>修改以下文件  

* 将res<span class="regexp">/values/</span>style.xml，res<span class="regexp">/values-v11/</span>style.xml，res<span class="regexp">/values-v14/</span>style.xml文件中Theme.AppCompat替换成<span class="string">android:</span>Theme
* 将res<span class="regexp">/menu/</span>main.xml文件中<span class="string">app:</span>showAsAction=<span class="string">"never"</span>去掉    
</code></pre><p>参考链接：<br><a href="http://www.mazhuang.org/2014/12/31/simplify-apk/" target="_blank" rel="external">如何让HelloWorld.apk体积最小</a>  </p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="修改APK文件遇到的一些问题">修改APK文件遇到的一些问题</h2><p>问题1：<br>adb install xxx.apk时，出现：</p>
<p><code>Zip EOCD: expected &gt;= 22 bytes, found 21</code></p>
<p>解决方法：</p>
<p>该问题是由于End of central directory record (EOCD)总长度不对造成的，笔者是由于少了一位0x00造成的。EOCD总长度本应该是22位，缺只有21位，则会报错。修改方法，检查缺失字段，并补齐。<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://to0rto.com/tags/android/"/>
    
      <category term="learn" scheme="http://to0rto.com/tags/learn/"/>
    
      <category term="Android" scheme="http://to0rto.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python Challenge 4]]></title>
    <link href="http://to0rto.com/2015/04/10/python-Challenge-4/"/>
    <id>http://to0rto.com/2015/04/10/python-Challenge-4/</id>
    <published>2015-04-10T02:52:31.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>主要学习用urllib2，索引字符串</p>
<h2 id="题目">题目</h2><p>查看源代码，提示：urllib may help. DON’T TRY ALL NOTHINGS, since it will never<br>end. 400 times is more than enough.<br>访问网页里面包含的链接跳转到另一个页面，直到得到最终结果。<a id="more"></a></p>
<h2 id="主要思路">主要思路</h2><ol>
<li>urllib读取网页内容，定位到链接位置</li>
<li>将固定的前缀与网页内容捕捉部分结合即为最终网址</li>
<li>循环跳转</li>
<li>跳转到某一次时，返回Yes. Divide by two and keep going.</li>
<li>于是将上一次的数字/2，继续跳转</li>
</ol>
<h2 id="实现代码">实现代码</h2><p>中间的干扰，提示语如下：</p>
<ul>
<li>and the next nothing is 44827</li>
<li>Your hands are getting tired and the next nothing is 94485</li>
<li>Yes. Divide by two and keep going.(16044)</li>
<li>There maybe misleading numbers in the text. One example is 82683. Look only for the next nothing and the next nothing is 63579</li>
</ul>
<p>好多坑啊，代码实现如下:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import urllib2</span><br><span class="line"></span><br><span class="line">content = urllib2.urlopen(<span class="string">'http://www.pythonchallenge.com/pc/def/linkedlist.php'</span>).<span class="keyword">read</span>()</span><br><span class="line">beg = content.<span class="keyword">index</span>(<span class="string">"&lt;a href="</span>) + <span class="number">9</span></span><br><span class="line">end = content.<span class="keyword">index</span>(<span class="string">"&gt;&lt;img"</span>) - <span class="number">1</span></span><br><span class="line"><span class="keyword">link</span> = <span class="string">"http://www.pythonchallenge.com/pc/def/"</span></span><br><span class="line">finalLink= <span class="keyword">link</span> + content[beg:end]</span><br><span class="line"><span class="keyword">print</span> finalLink</span><br><span class="line">link_before = finalLink[:(len(finalLink)-<span class="number">5</span>)]</span><br><span class="line"><span class="keyword">print</span> link_before</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    content2 = urllib2.urlopen(finalLink).<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">if</span> content2.find(<span class="string">"nothing is"</span>) != -<span class="number">1</span>:</span><br><span class="line">        count = content2.<span class="keyword">index</span>(<span class="string">"and the next nothing is"</span>)+<span class="number">24</span></span><br><span class="line">        num = content2[count:]</span><br><span class="line">    elif content2.find(<span class="string">"Divide by two"</span>) != -<span class="number">1</span>:</span><br><span class="line">        num = str(<span class="keyword">int</span>(num) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	<span class="keyword">break</span></span><br><span class="line">    finalLink = link_before + num</span><br><span class="line">    <span class="keyword">print</span> finalLink</span><br><span class="line"><span class="keyword">print</span> content2</span><br></pre></td></tr></table></figure>
<hr>
<p>越来越觉得自己对python了解的太少啦，</p>
<h2 id="本题新解法：">本题新解法：</h2><ol>
<li>urllib</li>
<li>正则表达式匹配数字</li>
</ol>
<p>新代码实现如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"><span class="attribute">content</span> = urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(<span class="string">'http://www.pythonchallenge.com/pc/def/linkedlist.php'</span>)</span></span>.<span class="function"><span class="title">read</span><span class="params">()</span></span></span><br><span class="line">con=<span class="attribute">content</span>.<span class="function"><span class="title">replace</span><span class="params">(<span class="string">" "</span>,<span class="string">""</span>)</span></span></span><br><span class="line">urls=re.<span class="function"><span class="title">findall</span><span class="params">(r<span class="string">"&lt;a.*?href=.*?&gt;"</span>,con,re.I)</span></span></span><br><span class="line">print urls</span><br><span class="line">link = <span class="string">"http://www.pythonchallenge.com/pc/def/"</span></span><br><span class="line">finalLink= link + urls[<span class="number">0</span>][<span class="number">8</span>:<span class="function"><span class="title">len</span><span class="params">(urls[<span class="number">0</span>])</span></span>-<span class="number">2</span>]</span><br><span class="line">print finalLink</span><br><span class="line"></span><br><span class="line">pattern = re.<span class="function"><span class="title">compile</span><span class="params">(r<span class="string">'\d+'</span>)</span></span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">while count != <span class="number">500</span>:</span><br><span class="line">    content2 = urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(finalLink)</span></span>.<span class="function"><span class="title">read</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> pattern.<span class="function"><span class="title">findall</span><span class="params">(content2)</span></span>:</span><br><span class="line">        temp = pattern.<span class="function"><span class="title">findall</span><span class="params">(content2)</span></span></span><br><span class="line">        <span class="keyword">if</span> <span class="function"><span class="title">len</span><span class="params">(temp)</span></span> != <span class="number">1</span>:</span><br><span class="line">        	nIndex = content2.<span class="function"><span class="title">index</span><span class="params">(<span class="string">"and the next nothing is"</span>)</span></span>+<span class="number">24</span></span><br><span class="line">        	num = content2[nIndex:]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	num = pattern.<span class="function"><span class="title">findall</span><span class="params">(content2)</span></span>[<span class="number">0</span>]</span><br><span class="line">    elif content2.<span class="function"><span class="title">find</span><span class="params">(<span class="string">"Divide by two"</span>)</span></span> != -<span class="number">1</span>:</span><br><span class="line">        print <span class="string">"Divide by two :"</span></span><br><span class="line">        num = <span class="function"><span class="title">str</span><span class="params">(int(num)</span></span> / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	break</span><br><span class="line">    finalLink = pattern.<span class="function"><span class="title">sub</span><span class="params">(num,finalLink)</span></span></span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    print content2</span><br><span class="line">    print finalLink,count</span><br><span class="line"></span><br><span class="line">print content2</span><br></pre></td></tr></table></figure>
<p>终于得到最后结果：peak.html</p>
<p>发现别人的好方法,mark：</p>
<p><code>urllib2.urlopen(&#39;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%s&#39;% nothing)</code></p>
<p>欢迎大家批评指正~</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要学习用urllib2，索引字符串</p>
<h2 id="题目">题目</h2><p>查看源代码，提示：urllib may help. DON’T TRY ALL NOTHINGS, since it will never<br>end. 400 times is more than enough.<br>访问网页里面包含的链接跳转到另一个页面，直到得到最终结果。]]>
    
    </summary>
    
      <category term="learn" scheme="http://to0rto.com/tags/learn/"/>
    
      <category term="python" scheme="http://to0rto.com/tags/python/"/>
    
      <category term="python" scheme="http://to0rto.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python Challenge 3]]></title>
    <link href="http://to0rto.com/2015/04/09/python-Challenge-3/"/>
    <id>http://to0rto.com/2015/04/09/python-Challenge-3/</id>
    <published>2015-04-09T08:29:16.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>简单学习了一下正则表达式，也算对正则表达式有了个大概的了解。</p>
<h2 id="题目要求">题目要求</h2><p>找到周围有3个大写字母的小写字母。即要找匹配这种形式的字符串dKKKlMMMk。<a id="more"></a></p>
<h2 id="解题思路">解题思路</h2><p>主要思路为：</p>
<pre><code><span class="number">1</span>.写出匹配的正则表达式
<span class="number">2</span>.创建<span class="literal">pattern</span>对象
<span class="number">3</span>.调用方法匹配
<span class="number">4</span>.输出结果中的小写字母
</code></pre><h2 id="实现代码">实现代码</h2><pre><code>import re
import urllib2

<span class="attribute">content</span> = urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(<span class="string">'http://www.pythonchallenge.com/pc/def/equality.html'</span>)</span></span>.<span class="function"><span class="title">read</span><span class="params">()</span></span>

beg = <span class="attribute">content</span>.<span class="function"><span class="title">index</span><span class="params">(<span class="string">"&lt;!--"</span>)</span></span> + <span class="number">4</span>

orig = <span class="attribute">content</span>[beg:]
pattern = re.<span class="function"><span class="title">compile</span><span class="params">(r<span class="string">'[^A-Z][A-Z]{3}[a-z][A-Z]{3}[^A-Z]'</span>)</span></span>

match =  pattern.<span class="function"><span class="title">findall</span><span class="params">(orig)</span></span>
<span class="keyword">if</span> match:
    print <span class="string">"result:"</span>
    <span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">xrange</span><span class="params">(<span class="number">0</span>,len(match)</span></span>):
        print match[i][<span class="number">4</span>],
      print <span class="string">".html"</span>
</code></pre><h2 id="结果">结果</h2><p>linkedlist.html,访问后提示，linkedlist.php，于是最终下一题的入口为linkedlist.php。欢迎大家批评指正~</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简单学习了一下正则表达式，也算对正则表达式有了个大概的了解。</p>
<h2 id="题目要求">题目要求</h2><p>找到周围有3个大写字母的小写字母。即要找匹配这种形式的字符串dKKKlMMMk。]]>
    
    </summary>
    
      <category term="learn" scheme="http://to0rto.com/tags/learn/"/>
    
      <category term="python" scheme="http://to0rto.com/tags/python/"/>
    
      <category term="python" scheme="http://to0rto.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python Challenge 2]]></title>
    <link href="http://to0rto.com/2015/04/08/python-Challenge-2/"/>
    <id>http://to0rto.com/2015/04/08/python-Challenge-2/</id>
    <published>2015-04-08T09:33:00.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目要求">题目要求</h2><p>统计出现次数最少的字母</p>
<h2 id="总体思路">总体思路</h2><p>主要思路如下：</p>
<pre><code><span class="number">1.</span>获取字符
<span class="number">2.</span>统计次数
<span class="number">3.</span>将字符与次数联系到一起
<span class="number">4.</span>排序
<span class="number">5.</span>发现最小的<span class="keyword">Value</span>为<span class="number">1</span>，且有多个，则输出<span class="keyword">Value</span>为<span class="number">1</span>的字符
</code></pre><a id="more"></a>
<p>开始，只统计次数，发现次数与字符之间的关系联系的不紧密，不方便观察</p>
<p>所以，想办法把字符和次数联系到一起，做字典，方法如下：</p>
<p>dict.setdefault(k,default=None)<br>比如dict.setdefault(k,2),如果k不在dict中，就将k加到字典里，并且value=2。</p>
<p>其中k为键 key，2为值value</p>
<p>接着，发现字典是有了，可是还是乱序的，还是不方便用肉眼看出结果，于是要排序：</p>
<p>dict可以按Key排序，也可以按Value排序，本题显然要用Value排序，找出最少的</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print sorted<span class="list">(<span class="keyword">dict</span>.items<span class="list">()</span>, key=lambda d: d[<span class="number">1</span>])</span></span><br></pre></td></tr></table></figure>
<h2 id="实现代码">实现代码</h2><p>最后，代码如下：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__author_<span class="number">_</span> = <span class="string">'toOrto'</span></span><br><span class="line">import collections</span><br><span class="line">import string</span><br><span class="line">import <span class="keyword">time</span></span><br><span class="line">import urllib2</span><br><span class="line"><span class="comment">#获取字符</span></span><br><span class="line">content = urllib2.urlopen(<span class="string">'http://www.pythonchallenge.com/pc/def/ocr.html'</span>).<span class="keyword">read</span>()</span><br><span class="line">count = content.<span class="keyword">index</span>(<span class="string">"below:"</span>) + <span class="number">6</span> + <span class="number">10</span></span><br><span class="line">new_content = content[count:]</span><br><span class="line">end = len(new_content) - <span class="number">5</span></span><br><span class="line"></span><br><span class="line">orig = new_content[:end]</span><br><span class="line"><span class="comment">#统计次数</span></span><br><span class="line">table = string.printable[:]</span><br><span class="line">freq = [<span class="number">0</span>] * (len(table) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in xrange(<span class="number">0</span>, len(orig)):</span><br><span class="line">    <span class="keyword">for</span> j in xrange(<span class="number">0</span>, len(table)):</span><br><span class="line">        <span class="keyword">if</span> orig[i] == table[j]:</span><br><span class="line">            fre<span class="string">q[j]</span> = fre<span class="string">q[j]</span> + <span class="number">1</span></span><br><span class="line"><span class="comment">#关联次数与字符</span></span><br><span class="line">dict=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k in xrange(<span class="number">0</span>, len(table)):</span><br><span class="line">    <span class="keyword">if</span> fre<span class="string">q[k]</span> == <span class="number">0</span> <span class="keyword">or</span> table[k] == <span class="string">'\n'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    dict.setdefault(table[k], fre<span class="string">q[k]</span>)</span><br><span class="line"><span class="comment">#按value排序</span></span><br><span class="line"><span class="keyword">print</span> sorted(dict.items(), key=lambda d: d[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#输出value为最小的KEY</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nbegin here\n"</span></span><br><span class="line"><span class="keyword">for</span> key in dict.<span class="keyword">keys</span>():</span><br><span class="line">    <span class="keyword">if</span> dict[key] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> key,</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nend here \n"</span></span><br></pre></td></tr></table></figure>
<h2 id="结果">结果</h2><p>最后结果为equality，欢迎大家批评指正，初学python，了解的太少，方法比较傻~</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目要求">题目要求</h2><p>统计出现次数最少的字母</p>
<h2 id="总体思路">总体思路</h2><p>主要思路如下：</p>
<pre><code><span class="number">1.</span>获取字符
<span class="number">2.</span>统计次数
<span class="number">3.</span>将字符与次数联系到一起
<span class="number">4.</span>排序
<span class="number">5.</span>发现最小的<span class="keyword">Value</span>为<span class="number">1</span>，且有多个，则输出<span class="keyword">Value</span>为<span class="number">1</span>的字符
</code></pre>]]>
    
    </summary>
    
      <category term="learn" scheme="http://to0rto.com/tags/learn/"/>
    
      <category term="python" scheme="http://to0rto.com/tags/python/"/>
    
      <category term="python" scheme="http://to0rto.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[crackme writeup]]></title>
    <link href="http://to0rto.com/2015/04/08/crackme-writeup/"/>
    <id>http://to0rto.com/2015/04/08/crackme-writeup/</id>
    <published>2015-04-08T03:34:00.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>很早就想着搭建个博客，才搭，就贴一些很早就开始写的东西吧，曾经做的一些crackme的writeup,贴出来丰富下自己的小天地~ </p>
<p>时间：2014年<br><a id="more"></a></p>
<h2 id="crackme3">crackme3</h2><p>题目：开启shift后门弹出KEY</p>
<p>看Sub_401c40</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl sub_401C40(<span class="type">int</span> a1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; // esi@<span class="number">1</span></span><br><span class="line">  signed <span class="type">int</span> v2; // edx@<span class="number">1</span></span><br><span class="line">  <span class="type">int</span> v3; // ecx@<span class="number">2</span></span><br><span class="line">  <span class="type">char</span> v4; // al@<span class="number">3</span></span><br><span class="line">  <span class="type">char</span> *v5; // edi@<span class="number">7</span></span><br><span class="line">  signed <span class="type">int</span> v6; // ecx@<span class="number">7</span></span><br><span class="line">  <span class="type">char</span> *v7; // esi@<span class="number">7</span></span><br><span class="line">  <span class="type">bool</span> v8; // zf@<span class="number">7</span></span><br><span class="line">  <span class="type">int</span> <span class="literal">result</span>; // eax@<span class="number">7</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">8</span>]; // [sp+<span class="type">Ch</span>] [bp-<span class="number">8</span>h]@<span class="number">2</span></span><br><span class="line"></span><br><span class="line">  sub_401B90((<span class="keyword">const</span> <span class="type">char</span> *)a1);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v10[v1] = <span class="number">0</span>;</span><br><span class="line">    v3 = v2;</span><br><span class="line">    <span class="keyword">if</span> ( __OFSUB__(v2, v2 + <span class="number">8</span>) ^ <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v4 = <span class="number">2</span> * v10[v1];</span><br><span class="line">        v8 = *(_BYTE *)(v3 + a1) == 'R';</span><br><span class="line">        v10[v1] = v4;</span><br><span class="line">        <span class="keyword">if</span> ( v8 )</span><br><span class="line">          v10[v1] = v4 + <span class="number">1</span>;</span><br><span class="line">        ++v3;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v3 &lt; v2 + <span class="number">8</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    v2 += <span class="number">8</span>;</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v2 &lt; <span class="number">48</span> );</span><br><span class="line">  v5 = off_403040;</span><br><span class="line">  v6 = <span class="number">3</span>;</span><br><span class="line">  v7 = v10;</span><br><span class="line">  <span class="literal">result</span> = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !v6 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v8 = *(_WORD *)v7 == *(_WORD *)v5;</span><br><span class="line">    v7 += <span class="number">2</span>;</span><br><span class="line">    v5 += <span class="number">2</span>;</span><br><span class="line">    --v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v8 );</span><br><span class="line">  <span class="keyword">if</span> ( v8 )</span><br><span class="line">    <span class="literal">result</span> = <span class="type">MessageBoxA</span>(<span class="number">0</span>, <span class="type">Caption</span>, <span class="type">Caption</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中sub_401b90为MD5加密函数，它的输入为L、R组成的0x30个数组。L代表点击鼠标左键，R代表点击鼠标右键。</p>
<p>然后经过一系列运算，下面与字符串“查水表”比较，相等了就弹出对话框，框里哈希值即为密钥。于是逆回去得到由L、R组成的数组。</p>
<p>然后输入，经过sub_301b90看到哈希值为：<br>    D27789EFCA409B6B6EE297D412334A65</p>
<h2 id="crackme4">crackme4</h2><p>带壳分析</p>
<p>sub_401000参数格式为HOWMP+6位数字密码，枚举6位数字,与内存里德哈希值相同即可。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub_401110(<span class="string">"seclover.com"</span>, (<span class="type">int</span>)lpBuffer, <span class="number">316</span>);</span><br><span class="line">wsprintfA(&amp;<span class="type">String</span>, <span class="string">"%s%s"</span>, <span class="string">"HOWMP"</span>, a3);</span><br><span class="line">v4 = lstrlenA(&amp;<span class="type">String</span>);</span><br><span class="line">sub_401000((<span class="type">BYTE</span> *)&amp;<span class="type">String</span>, v4, &amp;<span class="type">String</span>);</span><br><span class="line">v5 = lstrlenA(&amp;<span class="type">String</span>);</span><br><span class="line">sub_401000((<span class="type">BYTE</span> *)&amp;<span class="type">String</span>, v5, &amp;<span class="type">String</span>);</span><br><span class="line"><span class="literal">result</span> = lstrcmpA(&amp;<span class="type">String</span>, (<span class="type">LPCSTR</span>)lpBuffer + <span class="number">264</span>) != <span class="number">0</span> ? <span class="number">2</span> : <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>主要算哈希的函数为sub_401000，也根据此处爆破了，第一层密码为564987</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl sub_401000(<span class="type">BYTE</span> *pbData, <span class="type">DWORD</span> dwDataLen, <span class="type">LPSTR</span> lpString1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> <span class="literal">result</span>; // eax@<span class="number">1</span></span><br><span class="line">  <span class="type">DWORD</span> v4; // esi@<span class="number">6</span></span><br><span class="line">  <span class="type">bool</span> v5; // zf@<span class="number">6</span></span><br><span class="line">  <span class="type">HCRYPTHASH</span> phHash; // [sp+<span class="number">0</span>h] [bp-<span class="number">20</span>h]@<span class="number">2</span></span><br><span class="line">  <span class="type">HCRYPTPROV</span> phProv; // [sp+<span class="number">4</span>h] [bp-<span class="number">1</span>Ch]@<span class="number">1</span></span><br><span class="line">  <span class="type">DWORD</span> pdwDataLen; // [sp+<span class="number">8</span>h] [bp-<span class="number">18</span>h]@<span class="number">6</span></span><br><span class="line">  <span class="type">CHAR</span> <span class="type">String2</span>; // [sp+<span class="type">Ch</span>] [bp-<span class="number">14</span>h]@<span class="number">7</span></span><br><span class="line">  <span class="type">BYTE</span> v10[<span class="number">16</span>]; // [sp+<span class="number">10</span>h] [bp-<span class="number">10</span>h]@<span class="number">6</span></span><br><span class="line"></span><br><span class="line">  <span class="literal">result</span> = <span class="type">CryptAcquireContextA</span>(&amp;phProv, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>u, <span class="number">0xF0000000</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="literal">result</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="type">CryptCreateHash</span>(phProv, <span class="number">0x8003</span>u, <span class="number">0</span>, <span class="number">0</span>, &amp;phHash) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="type">CryptHashData</span>(phHash, pbData, dwDataLen, <span class="number">0</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">CryptGetHashParam</span>(phHash, <span class="number">2</span>u, v10, &amp;pdwDataLen, <span class="number">0</span>);</span><br><span class="line">        v4 = <span class="number">0</span>;</span><br><span class="line">        v5 = pdwDataLen == <span class="number">0</span>;</span><br><span class="line">        *lpString1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            wsprintfA(&amp;<span class="type">String2</span>, <span class="string">"%02X"</span>, v10[v4]);</span><br><span class="line">            lstrcatA(lpString1, &amp;<span class="type">String2</span>);</span><br><span class="line">            ++v4;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( v4 &lt; pdwDataLen );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">CryptDestroyHash</span>(phHash);</span><br><span class="line">        <span class="type">CryptReleaseContext</span>(phProv, <span class="number">0</span>);</span><br><span class="line">        <span class="literal">result</span> = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">CryptDestroyHash</span>(phHash);</span><br><span class="line">        <span class="type">CryptReleaseContext</span>(phProv, <span class="number">0</span>);</span><br><span class="line">        <span class="literal">result</span> = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">CryptReleaseContext</span>(phProv, <span class="number">0</span>);</span><br><span class="line">      <span class="literal">result</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二层，在ReadFile之后下断点，得到读出的文件内容，然后将前6个字节与GIF89a异或即得到输入密码。<br>然后输入密码，解出文件logo.gif.</p>
<h2 id="game">game</h2><p>也木啥好说的这道题，主要是锻炼了我第一次直接粘贴IDA的代码到VS2010稍加改动遍历求KEY。下面附上题目和解题代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+11h] [bp-2Fh]@1</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [sp+15h] [bp-2Bh]@1</span></span><br><span class="line">  __int16 v6; <span class="comment">// [sp+16h] [bp-2Ah]@1</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [sp+18h] [bp-28h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [sp+19h] [bp-27h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+1Dh] [bp-23h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+21h] [bp-1Fh]@1</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+25h] [bp-1Bh]@1</span></span><br><span class="line">  __int16 v12; <span class="comment">// [sp+29h] [bp-17h]@1</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [sp+2Bh] [bp-15h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [sp+2Ch] [bp-14h]@38</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [sp+30h] [bp-10h]@38</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [sp+34h] [bp-Ch]@38</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [sp+38h] [bp-8h]@21</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+3Ch] [bp-4h]@4</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please input KEY:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, &amp;v9);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v9) != <span class="number">11</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You input Key is wrong !"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (*((_BYTE *)&amp;v9 + i) &gt; <span class="string">'9'</span> || *((_BYTE *)&amp;v9 + i) &lt;= <span class="string">'0'</span>) &amp;&amp; *((_BYTE *)&amp;v9 + i) != <span class="string">'-'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You input Key is error !"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( BYTE3(v9) != <span class="string">'-'</span> || BYTE2(v10) != <span class="string">'-'</span> || BYTE2(v9) != <span class="string">'3'</span> || BYTE1(v10) != <span class="string">'2'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You input Key is error !"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( BYTE3(v9) != <span class="string">'-'</span> || BYTE2(v10) != <span class="string">'-'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = i + <span class="number">1</span>; j &lt;= <span class="number">10</span>; ++j )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *((_BYTE *)&amp;v9 + i) == *((_BYTE *)&amp;v9 + j) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"You input key is error2!"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; ++i )</span><br><span class="line">    *((_BYTE *)&amp;v8 + i) = *((_BYTE *)&amp;v9 + i);</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">4</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">    *((_BYTE *)&amp;v6 + i++) = *((_BYTE *)&amp;v9 + j);</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">7</span>; j &lt;= <span class="number">10</span>; ++j )</span><br><span class="line">    *((_BYTE *)&amp;v4 + i++) = *((_BYTE *)&amp;v9 + j);</span><br><span class="line">  v16 = atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v8);</span><br><span class="line">  v15 = atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v6);</span><br><span class="line">  v14 = atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v15 * v16 == v14 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Key is your input!"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"SaoNian ,please try again ...."</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是我的遍历代码，丑丑丑，求指导。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;stdio.h&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;string&gt;</span><br><span class="line"></span><br><span class="line">#define  <span class="keyword">BYTE</span> unsigned <span class="keyword">char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __cdecl main(<span class="keyword">int</span> argc, const <span class="keyword">char</span> **argv, const <span class="keyword">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> v4; <span class="comment">// [sp+11h] [bp-2Fh]@1</span></span><br><span class="line">	<span class="keyword">char</span> v5; <span class="comment">// [sp+15h] [bp-2Bh]@1</span></span><br><span class="line">	__int16 v6; <span class="comment">// [sp+16h] [bp-2Ah]@1</span></span><br><span class="line">	<span class="keyword">char</span> v7; <span class="comment">// [sp+18h] [bp-28h]@1</span></span><br><span class="line">    <span class="keyword">int</span> v8; <span class="comment">// [sp+19h] [bp-27h]@1</span></span><br><span class="line">    <span class="keyword">int</span> v9; <span class="comment">// [sp+1Dh] [bp-23h]@1</span></span><br><span class="line">	<span class="keyword">int</span> v10; <span class="comment">// [sp+21h] [bp-1Fh]@1</span></span><br><span class="line">	<span class="keyword">int</span> v11; <span class="comment">// [sp+25h] [bp-1Bh]@1</span></span><br><span class="line">	__int16 v12; <span class="comment">// [sp+29h] [bp-17h]@1</span></span><br><span class="line">	<span class="keyword">char</span> v13; <span class="comment">// [sp+2Bh] [bp-15h]@1</span></span><br><span class="line">	<span class="keyword">int</span> v14; <span class="comment">// [sp+2Ch] [bp-14h]@38</span></span><br><span class="line">	<span class="keyword">int</span> v15; <span class="comment">// [sp+30h] [bp-10h]@38</span></span><br><span class="line">	<span class="keyword">int</span> v16; <span class="comment">// [sp+34h] [bp-Ch]@38</span></span><br><span class="line">	<span class="keyword">int</span> j; <span class="comment">// [sp+38h] [bp-8h]@21</span></span><br><span class="line">	signed <span class="keyword">int</span> i; <span class="comment">// [sp+3Ch] [bp-4h]@4</span></span><br><span class="line"></span><br><span class="line">	v9 = <span class="number">0</span>;</span><br><span class="line">	v10 = <span class="number">0</span>;</span><br><span class="line">	v11 = <span class="number">0</span>;</span><br><span class="line">	v12 = <span class="number">0</span>;</span><br><span class="line">	v13 = <span class="number">0</span>;</span><br><span class="line">	v8 = <span class="number">0</span>;</span><br><span class="line">	v6 = <span class="number">0</span>;</span><br><span class="line">	v7 = <span class="number">0</span>;</span><br><span class="line">	v4 = <span class="number">0</span>;</span><br><span class="line">	v5 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	puts(<span class="string">"Please input KEY:"</span>);</span><br><span class="line">	<span class="comment">//scanf("%s", &amp;v9);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//char *v9 = "143-52-7896";</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		*((<span class="keyword">BYTE</span> *)&amp;v9 + i) = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">2</span>) = <span class="string">'3'</span>;</span><br><span class="line">	*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">5</span>) = <span class="string">'2'</span>;</span><br><span class="line">	*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">3</span>) = <span class="string">'-'</span>;</span><br><span class="line">	*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">6</span>) = <span class="string">'-'</span>;</span><br><span class="line">	*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">10</span>) = <span class="string">'6'</span>;</span><br><span class="line">	printf(<span class="string">"%s"</span>,(const <span class="keyword">char</span> *)(&amp;v9));</span><br><span class="line">	<span class="keyword">int</span> tmp0 = <span class="string">'1'</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp1 = <span class="string">'1'</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp4 = <span class="string">'1'</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp7 = <span class="string">'1'</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp8 = <span class="string">'1'</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp9 = <span class="string">'1'</span>;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(tmp0 = <span class="string">'1'</span>; tmp0 &lt;= <span class="string">'9'</span>; tmp0++)</span><br><span class="line">		<span class="keyword">for</span>(tmp1 = <span class="string">'1'</span>; tmp1 &lt;= <span class="string">'9'</span>; tmp1++)</span><br><span class="line">			<span class="keyword">for</span>(tmp4 = <span class="string">'1'</span>; tmp4 &lt;= <span class="string">'9'</span>;tmp4++)</span><br><span class="line">				<span class="keyword">for</span>(tmp7 = <span class="string">'1'</span>; tmp7 &lt;= <span class="string">'9'</span>; tmp7++)</span><br><span class="line">					<span class="keyword">for</span>(tmp8 = <span class="string">'1'</span>;tmp8&lt;=<span class="string">'9'</span>; tmp8++)</span><br><span class="line">						<span class="keyword">for</span>(tmp9 = <span class="string">'1'</span>;tmp9&lt;=<span class="string">'9'</span>; tmp9++)</span><br><span class="line">						&#123;</span><br><span class="line">							*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">0</span>) =tmp0;</span><br><span class="line">							*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">1</span>) =tmp1;</span><br><span class="line">							*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">4</span>) =tmp4;</span><br><span class="line">							*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">9</span>) = tmp9;</span><br><span class="line">							*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">8</span>) = tmp8;</span><br><span class="line">							*((<span class="keyword">BYTE</span> *)&amp;v9 + <span class="number">7</span>) = tmp7;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">							<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; ++i )</span><br><span class="line">								*((<span class="keyword">BYTE</span> *)&amp;v8 + i) = *((<span class="keyword">BYTE</span> *)&amp;v9 + i);</span><br><span class="line">							i = <span class="number">0</span>;</span><br><span class="line">							<span class="keyword">for</span> ( j = <span class="number">4</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">								*((<span class="keyword">BYTE</span> *)&amp;v6 + i++) = *((<span class="keyword">BYTE</span> *)&amp;v9 + j);</span><br><span class="line">							i = <span class="number">0</span>;</span><br><span class="line">							<span class="keyword">for</span> ( j = <span class="number">7</span>; j &lt;= <span class="number">10</span>; ++j )</span><br><span class="line">								*((<span class="keyword">BYTE</span> *)&amp;v4 + i++) = *((<span class="keyword">BYTE</span> *)&amp;v9 + j);</span><br><span class="line">							v16 = atoi((const <span class="keyword">char</span> *)&amp;v8);</span><br><span class="line">							v15 = atoi((const <span class="keyword">char</span> *)&amp;v6);</span><br><span class="line">							v14 = atoi((const <span class="keyword">char</span> *)&amp;v4);</span><br><span class="line">							<span class="keyword">if</span> ( v15 * v16 == v14 )</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">								<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; ++i )</span><br><span class="line"></span><br><span class="line">								&#123;</span><br><span class="line">									<span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">									&#123;</span><br><span class="line">										<span class="keyword">continue</span>;</span><br><span class="line">									&#125;</span><br><span class="line"></span><br><span class="line">									<span class="keyword">for</span> ( j = i + <span class="number">1</span>; j &lt;= <span class="number">10</span>; ++j )</span><br><span class="line"></span><br><span class="line">									&#123;</span><br><span class="line"></span><br><span class="line">										<span class="keyword">if</span> ( *((<span class="keyword">BYTE</span> *)&amp;v9 + i) == *((<span class="keyword">BYTE</span> *)&amp;v9 + j) )</span><br><span class="line"></span><br><span class="line">										&#123;</span><br><span class="line"></span><br><span class="line">											puts(<span class="string">"You input key is error2!"</span>);</span><br><span class="line">											flag = <span class="number">1</span>;</span><br><span class="line">											<span class="comment">//exit(0);</span></span><br><span class="line"></span><br><span class="line">										&#125;</span><br><span class="line"></span><br><span class="line">									&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">								&#125;</span><br><span class="line">								<span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">								&#123;</span><br><span class="line">									printf(<span class="string">"%s"</span>,(const <span class="keyword">char</span> *)(&amp;v9));</span><br><span class="line">									puts(<span class="string">"Key is your input!"</span>);</span><br><span class="line">									<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">								&#125;</span><br><span class="line"></span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">								puts(<span class="string">"please try again ...."</span>);</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OVERFLOW">OVERFLOW</h2><p>这是一道溢出的题，</p>
<p>主目录</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">what you want <span class="built_in">to</span> <span class="built_in">do</span>?</span><br><span class="line"><span class="number">1</span><span class="comment">----&gt;input name</span></span><br><span class="line"><span class="number">2</span><span class="comment">----&gt;show name</span></span><br><span class="line"><span class="number">3</span><span class="comment">---&gt;modify information</span></span><br><span class="line"><span class="number">4</span><span class="comment">----&gt;del information</span></span><br></pre></td></tr></table></figure>
<p>下面是主要处理的代码，可看到flag2[5] == 1便可自动回显flag.</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">char</span> <span class="atom">name</span>[<span class="number">1024</span>]; // [<span class="atom">sp</span>+<span class="number">84</span><span class="name">Ch</span>] [<span class="atom">bp</span>-<span class="number">69</span><span class="name">Ch</span>]@<span class="number">1</span></span><br><span class="line"><span class="atom">char</span> <span class="atom">flag2</span>[<span class="number">400</span>]; // [<span class="atom">sp</span>+<span class="name">C4Ch</span>] [<span class="atom">bp</span>-<span class="number">29</span><span class="name">Ch</span>]@<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>如果1,input name读入超过1024就可覆盖flag2的内容。</p>
<p>然而</p>
<p> read_ptr(fd, name, 1024) 每次最多读入1024个字节，看起来没法多读。</p>
<p> 然后发现，如果输入3，处理选项3 的代码：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v2 = strlen(<span class="property">name</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="property">name</span>[<span class="number">0</span>] )</span><br><span class="line">&#123;</span><br><span class="line">          <span class="command">write</span>(fd, <span class="string">"Input your new name:\n"</span>, <span class="number">0x15</span>u);</span><br><span class="line">          start_len = v2 - <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span> ( read_ptr(fd, &amp;<span class="property">name</span>[v2 - <span class="number">1</span>], v2 - <span class="number">1</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">            <span class="command">write</span>(fd, <span class="string">"name is empty or some wrong happened!\n"</span>, <span class="number">0x26</span>u);</span><br><span class="line">          *(_DWORD *)buf = *(_DWORD *)<span class="string">"New name saved\n"</span>;</span><br><span class="line">          *(_DWORD *)&amp;buf[<span class="number">4</span>] = *(_DWORD *)<span class="string">"name saved\n"</span>;</span><br><span class="line">          *(_DWORD *)&amp;buf[<span class="number">8</span>] = *(_DWORD *)<span class="string">" saved\n"</span>;</span><br><span class="line">          *(_DWORD *)&amp;buf[<span class="number">12</span>] = *(_DWORD *)<span class="string">"ed\n"</span>;</span><br><span class="line">          <span class="command">write</span>(fd, buf, <span class="number">0xF</span>u);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到直接读入到name偏移为v2（即为1中输入的名字的长度），因此可以分两次读入大于1024个字节，且后面用‘1’覆盖即可。<br>溢出触发如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c 'print <span class="string">"1\n"</span>+<span class="string">"A"</span><span class="keyword">*</span>550 +<span class="string">"\n"</span>+<span class="string">"3\n"</span>+<span class="string">"1"</span><span class="keyword">*</span>550+<span class="string">"\n"</span>'<span class="string">|nc 107.170.228.194 12345</span></span><br></pre></td></tr></table></figure>
<h2 id="exp">exp</h2><p>主要bug在strcpy</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl main(<span class="type">int</span> argc, <span class="keyword">const</span> <span class="type">char</span> **argv, <span class="keyword">const</span> <span class="type">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> <span class="literal">result</span>; // eax@<span class="number">2</span></span><br><span class="line">  <span class="type">int</span> v4; // [sp+<span class="number">0</span>h] [bp-<span class="number">41</span>Ch]@<span class="number">1</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">4</span>]; // [sp+<span class="number">400</span>h] [bp-<span class="number">1</span>Ch]@<span class="number">1</span></span><br><span class="line">  <span class="type">int</span> i; // [sp+<span class="number">410</span>h] [bp-<span class="type">Ch</span>]@<span class="number">3</span></span><br><span class="line">  size_t v7; // [sp+<span class="number">414</span>h] [bp-<span class="number">8</span>h]@<span class="number">1</span></span><br><span class="line">  <span class="type">int</span> v8; // [sp+<span class="number">418</span>h] [bp-<span class="number">4</span>h]@<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  strcpy(v5, <span class="string">"abcdefghctfy"</span>);</span><br><span class="line">  sub_401515((<span class="type">int</span>)asc_409040, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)asc_40908C, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)aThisProblemHas, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)aForExampleTheF, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)aSoTheFinalFlag, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)aWhatIsKey_theK, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)aByXidianCtf, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)asc_409254, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)asc_4092A0, v4);</span><br><span class="line">  sub_401515((<span class="type">int</span>)aPleaseInputThe, v4);</span><br><span class="line">  gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">  v7 = strlen((<span class="keyword">const</span> <span class="type">char</span> *)&amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( (signed <span class="type">int</span>)v7 &lt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (signed <span class="type">int</span>)v7; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (signed <span class="type">int</span>)*((_BYTE *)&amp;v4 + i) &lt; <span class="number">0x21</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_401515((<span class="type">int</span>)aPleaseInputT_0, v4);</span><br><span class="line">        system(aPause);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( (signed <span class="type">int</span>)*((_BYTE *)&amp;v4 + i) &gt; 'z' )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_401515((<span class="type">int</span>)aPleaseInputT_1, v4);</span><br><span class="line">        system(aPause_0);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">11</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5[i] != *((_BYTE *)&amp;v4 + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_401515((<span class="type">int</span>)aNoWeNeedTheCor, v4);</span><br><span class="line">        system(aPause_1);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v8 = sub_401000((<span class="type">char</span> *)&amp;v4, v5);</span><br><span class="line">    <span class="keyword">if</span> ( v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401515((<span class="type">int</span>)aNoWeNeedTheC_0, v4);</span><br><span class="line">      system(aPause_2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      sub_401515((<span class="type">int</span>)aYesItSOneOfThe, v4);</span><br><span class="line">      system(aPause_3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">result</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="literal">result</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，看到abcdefghctfy为其中一部分KEY。<br>题目说有两个KEY，拼在一起为最终结果。<br>仔细看会发现，sub401000<br>先strcmp<br>将比较结果放到V4里.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_401000</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">char</span> *a2)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [sp+0h] [bp-10h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+Ch] [bp-4h]@1</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="built_in">strcmp</span>(a1, a2);</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;v3, a1);</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下变量在栈里的结构，其中VAR_1为V3，VAR_4为 V4。V3恰好为12个字节，abcdefghctfy也为12个字节。而<strong>strcpy</strong>复制这12个字节到V3时，会把最后的\0也复制过去，因此就会覆盖掉变量V4，从而修改返回值为0。为保证这4位为全0，只需该字符串比abcdefghctfy大，且位数相同。即为abcdefghctfz。拼在一起即为最后结果。</p>
<p>C语言标准库函数strcpy，把从src地址开始且含有NULL结束符的字符串复制到以dest开始的地址空间。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"><span class="number">00000010</span> var_1<span class="number">0</span>          db ?</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>F                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>E                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>D                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>C                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>B                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>A                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>9                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">0000000</span>8                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">00000007</span>                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">00000006</span>                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">00000005</span>                 db ? ; undefined</span><br><span class="line"></span>-<span class="ruby"><span class="number">00000004</span> var_4           dd ?</span><br><span class="line"></span>+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 arg_0           dd ?                    ; offset</span><br><span class="line">+0000000C arg_4           dd ?                    ; offset</span><br><span class="line">+00000010</span><br><span class="line">+00000010 ; end of stack variables</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="game-1">game</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v9) != <span class="number">11</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You input Key is wrong !"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>strlen所作的仅仅是一个计数器的工作，它从内存的某个位置（可以是字符串开头，中间某个位置，甚至是某个不确定的内存区域）开始扫描，直到碰到第一个字符串结束符’\0’为止，然后返回计数器值(长度不包含“\0”)</p>
<p>纯输入11个字符</p>
<p>和可以看见的字符串比较</p>
<p>主要算法是异或’</p>
<p>无视我糟糕的Python</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#__author = toOrto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">orig_hex=[<span class="number">0</span>]*<span class="number">11</span></span><br><span class="line">orig = <span class="string">"AnswerDBing"</span></span><br><span class="line"><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">xrange</span><span class="params">(<span class="number">0</span>,<span class="number">11</span>)</span></span>:</span><br><span class="line">    orig_hex[i]= <span class="function"><span class="title">ord</span><span class="params">(orig[i])</span></span></span><br><span class="line">print orig_hex</span><br><span class="line"></span><br><span class="line"><span class="tag">b</span> = [<span class="number">0</span>x76,<span class="number">0</span>x0b,<span class="number">0</span>x33,<span class="number">0</span>x5,<span class="number">0</span>x50,<span class="number">0</span>x43,<span class="number">0</span>x71,<span class="number">0</span>x2,<span class="number">0</span>x50,<span class="number">0</span>xf,<span class="number">0</span>x1e]</span><br><span class="line">print <span class="tag">b</span></span><br><span class="line">print <span class="function"><span class="title">len</span><span class="params">(b)</span></span></span><br><span class="line"></span><br><span class="line">list_length = <span class="number">11</span></span><br><span class="line">c = [<span class="number">0</span>]*list_length</span><br><span class="line">print c</span><br><span class="line">d = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">xrange</span><span class="params">(<span class="number">0</span>,<span class="number">11</span>)</span></span>:</span><br><span class="line">    c[i] = orig_hex[i]^<span class="tag">b</span>[i]</span><br><span class="line">    d += <span class="function"><span class="title">chr</span><span class="params">(c[i])</span></span></span><br><span class="line">print d</span><br></pre></td></tr></table></figure>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很早就想着搭建个博客，才搭，就贴一些很早就开始写的东西吧，曾经做的一些crackme的writeup,贴出来丰富下自己的小天地~ </p>
<p>时间：2014年<br>]]>
    
    </summary>
    
      <category term="crack" scheme="http://to0rto.com/tags/crack/"/>
    
      <category term="ctf writeup" scheme="http://to0rto.com/tags/ctf-writeup/"/>
    
      <category term="reverse" scheme="http://to0rto.com/tags/reverse/"/>
    
      <category term="Reverse" scheme="http://to0rto.com/categories/Reverse/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python Challenge]]></title>
    <link href="http://to0rto.com/2015/04/06/python-Challenge/"/>
    <id>http://to0rto.com/2015/04/06/python-Challenge/</id>
    <published>2015-04-06T13:29:28.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>学习python，第一二个challenge。<br><a id="more"></a></p>
<h2 id="0x00">0x00</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print <span class="number">2</span>**<span class="number">38</span></span><br><span class="line"><span class="number">274877906944</span></span><br></pre></td></tr></table></figure>
<h2 id="0x01">0x01</h2><pre><code>__author__ = <span class="string">'toOrto'</span>
<span class="literal">import</span> string
orig = <span class="string">"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp.\
bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle.\
 sqgle qrpgle.kyicrpylq() gq pcamkkclbcb.\
 lmu ynnjw ml rfc spj."</span>
orig = <span class="string">"map"</span>

new_list = [<span class="number">0</span>] * len(orig)
<span class="keyword">final</span> = <span class="string">""</span>
<span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,len(orig)):
    new_list[i] += ord(orig[i])
    <span class="keyword">if</span> new_list[i] == <span class="number">0x20</span>:
        <span class="keyword">final</span> += <span class="string">" "</span>
        <span class="keyword">continue</span>
    <span class="keyword">if</span> new_list[i] == <span class="number">0x2e</span>:
        <span class="keyword">final</span> += <span class="string">"."</span>
        <span class="keyword">continue</span>
    <span class="keyword">if</span> new_list[i] == <span class="number">0x27</span>:
        <span class="keyword">final</span> += <span class="string">"'"</span>
        <span class="keyword">continue</span>
    <span class="keyword">if</span> new_list[i] == <span class="number">0x28</span>:
        <span class="keyword">final</span> += <span class="string">"("</span>
        <span class="keyword">continue</span>
    <span class="keyword">if</span> new_list[i] == <span class="number">0x29</span>:
        <span class="keyword">final</span> += <span class="string">")"</span>
        <span class="keyword">continue</span>
    new_list[i] = new_list[i]+<span class="number">2</span>
    <span class="keyword">if</span> new_list[i] &gt; <span class="number">0x7a</span>:
        new_list[i] = <span class="number">0x61</span> + (new_list[i] - <span class="number">0x7a</span> -<span class="number">1</span>)
    <span class="keyword">final</span> += chr(new_list[i])
<span class="built_in">print</span> new_list
<span class="built_in">print</span> <span class="string">"\n"</span>+<span class="keyword">final</span> + <span class="string">"\n"</span>
</code></pre><p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>学习python，第一二个challenge。<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://to0rto.com/tags/python/"/>
    
      <category term="python" scheme="http://to0rto.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 路上ing]]></title>
    <link href="http://to0rto.com/2015/04/06/Android-%E8%B7%AF%E4%B8%8Aing/"/>
    <id>http://to0rto.com/2015/04/06/Android-路上ing/</id>
    <published>2015-04-06T12:51:36.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>记载在学习android的路上遇到的问题，希望和我一样的人，少走点弯路。</p>
<h2 id="多台模拟器">多台模拟器</h2><p>当adb devices，显示多台可连机器时，用类似于以下的命令即可</p>
<pre><code>adb <span class="operator">-s</span> emulator-<span class="number">5554</span> shell
</code></pre><a id="more"></a>
<h2 id="解决/system/lib只读，不能拷贝的问题">解决/system/lib只读，不能拷贝的问题</h2><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mount</span> -o rw,remount /<span class="literal">system</span></span><br></pre></td></tr></table></figure>
<p>拷贝完恢复只读</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mount</span> -o ro,remount /<span class="literal">system</span></span><br></pre></td></tr></table></figure>
<h2 id="eclipse_调试Native_C">eclipse 调试Native C</h2><p>eclipse调试native C程序，断点位于C代码里，却没断下来是因为：</p>
<p>如果在NDK，C代码里下断点，缺没有断下来，很有可能是由于 activity启动 与native调试开始 有间隔，如果在调试器 启动之前就执行过了，则断点就不会被hit。所以此时，用Onclick事件来控制一下就可以了。</p>
<p>或者等待屏幕横竖屏切换</p>
<p>当屏幕自动切换时，默认状态的应用程序，会重新调用onCreate，相当于重新启动了一次应用程序。所以断点就可以被击中</p>
<h2 id="遇到Unknown_Application_ABI错误:">遇到Unknown Application ABI错误:</h2><p>此时一般情况为android sdk （比如android-17)， 手机或模拟器是2.3 （即android-10），问题就是ndk的app_platform不匹配。</p>
<p>解决方法：</p>
<p>需要在jni文件夹的下面手动建立新一个文件 Application.mk</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">APP_PLATFORM </span>:<span class="value">= android-<span class="number">10</span></span></span></span><br></pre></td></tr></table></figure>
<h2 id="调试起来三点">调试起来三点</h2><p>1.android:debuggable=”true”   android manifest文件</p>
<p>2.设置NDK_DEBUG=1</p>
<p>3.ant debug install</p>
<h2 id="关于调试">关于调试</h2><p>gdb和gdbserver的版本必须是匹配的才能debug</p>
<h2 id="Ant的使用">Ant的使用</h2><p>进入项目目录通过如下命令为项目增加Ant支持</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android update project –t <span class="tag">&lt;<span class="title">Target</span>&gt;</span> -p <span class="tag">&lt;<span class="title">Path</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>清理项目</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ant</span> clean</span><br></pre></td></tr></table></figure>
<p>编译项目</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ant</span> <span class="built_in">debug</span></span><br></pre></td></tr></table></figure>
<p>安装到设备</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记载在学习android的路上遇到的问题，希望和我一样的人，少走点弯路。</p>
<h2 id="多台模拟器">多台模拟器</h2><p>当adb devices，显示多台可连机器时，用类似于以下的命令即可</p>
<pre><code>adb <span class="operator">-s</span> emulator-<span class="number">5554</span> shell
</code></pre>]]>
    
    </summary>
    
      <category term="Android" scheme="http://to0rto.com/tags/Android/"/>
    
      <category term="apk" scheme="http://to0rto.com/tags/apk/"/>
    
      <category term="调试" scheme="http://to0rto.com/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Android" scheme="http://to0rto.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android反调试学习]]></title>
    <link href="http://to0rto.com/2015/04/06/Android%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://to0rto.com/2015/04/06/Android反调试学习/</id>
    <published>2015-04-06T12:16:17.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="静态和动态两方面">静态和动态两方面</h2><h3 id="对抗静态分析">对抗静态分析</h3><p>1.代码混淆：混淆函数名、变量名等</p>
<p>2.NDK：关键代码用C、C++实现（逆向NDK相对繁琐）</p>
<p>3.加UPX壳：加壳来增加静态分析的难度</p>
<a id="more"></a>
<h3 id="对抗动态分析">对抗动态分析</h3><p>1.检测调试器</p>
<p>在AndroidManifest.xml文件的Application标签中加入android:debuggable=”false”</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((getApplicationInfo().flags&amp;=ApplicationInfo.FLAG_DEBUGGABLE)!=<span class="number">0</span>) &#123;</span><br><span class="line">            Log.e(<span class="string">"DEBUG"</span>, <span class="string">"程序此时为可调试状态！"</span>);</span><br><span class="line">            android.<span class="built_in">os</span>.Process.killProcess(android.<span class="built_in">os</span>.Process.myPid());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<pre><code>android<span class="class">.os</span><span class="class">.Debug</span><span class="class">.isDebuggerConnected</span>()
</code></pre><p>2.检测模拟器</p>
<p>通过 adb shell getprop 获得属性值，可以发现模拟器客真机这几个属性不一致，比如IMEI：</p>
<pre><code><span class="tag">IMEI</span>：如果为000000000000000，则为模拟器，不为空，则不是。（不可靠，因为<span class="tag">IMEI</span>是可以修改的）
<span class="rule"><span class="attribute">model </span>:<span class="value"> 模拟器中为 sdk或者 google_sdk ，真机中为具体型号</span></span>;
<span class="rule"><span class="attribute">ro.kernel.qemu </span>:<span class="value"> 模拟器中为 <span class="number">1</span>，真机中不存在</span></span>;
</code></pre><p>3.检测签名</p>
<p>4.联网校验classes.dex的CRC</p>
<p>5.针对工具（比如dex2jar、apktool）本身的漏洞，进行利用，来达到反调试的效果。</p>
<p>以上，是博主网上搜索各种资料学习整理的结果~</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="静态和动态两方面">静态和动态两方面</h2><h3 id="对抗静态分析">对抗静态分析</h3><p>1.代码混淆：混淆函数名、变量名等</p>
<p>2.NDK：关键代码用C、C++实现（逆向NDK相对繁琐）</p>
<p>3.加UPX壳：加壳来增加静态分析的难度</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://to0rto.com/tags/Android/"/>
    
      <category term="apk" scheme="http://to0rto.com/tags/apk/"/>
    
      <category term="Android" scheme="http://to0rto.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0ctf & Alictf writeup]]></title>
    <link href="http://to0rto.com/2015/04/06/0ctf-Alictf-writeup/"/>
    <id>http://to0rto.com/2015/04/06/0ctf-Alictf-writeup/</id>
    <published>2015-04-06T10:32:08.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="0ctf_writeup">0ctf_writeup</h2><h3 id="1-easyRe">1.easyRe</h3><p>simple.apk</p>
<p>反编译后在res/raw目录下有flag.txt文件。</p>
<p>看反编译后的代码<a id="more"></a></p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    System<span class="string">.loadLibrary("antidebug")</span>;</span><br><span class="line">    init();</span><br><span class="line">	super<span class="string">.onCreate(savedInstanceState)</span>;</span><br><span class="line">    setContentView(R<span class="string">.layout.activity_easy_re)</span>;</span><br><span class="line"></span><br><span class="line">    this<span class="string">.bt1</span> = ((Button)findViewById(R<span class="string">.id.button1))</span>;</span><br><span class="line">    this<span class="string">.iv1</span> = ((ImageView)findViewById(R<span class="string">.id.imageView1))</span>;</span><br><span class="line">    this<span class="string">.et1</span> = ((EditText)findViewById(R<span class="string">.id.editText1))</span>;</span><br><span class="line">    this<span class="string">.bt1.setOnClickListener(this)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>加载了libantidebug.so。<br>init()函数，只是读取flag.txt文件，又写回到flag.txt。</p>
<p>flag.txt的内容为0ctf{Too_Simple_Sometimes_Naive!!!}。随手提交了一下，不对。</p>
<p>果然是Too Naive。</p>
<p>分析so文件，发现有个j_j_hook()函数,hook了read函数</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">j_j_memcpy(dest, &amp;unk_4818, <span class="number">0x23</span>u);</span><br><span class="line">v5 = dword_6044;</span><br><span class="line">j_j_hook_precall();</span><br><span class="line">v11 = ((<span class="type">int</span> (__fastcall *)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>))v5)(v4, v3, v10);</span><br><span class="line">v6 = j_j_getpid();</span><br><span class="line">j_j_snprintf(&amp;s, <span class="number">0xFF</span>u, <span class="string">"/proc/%d/fd/%d"</span>, v6, v4);</span><br><span class="line">j_j_memset(&amp;v14, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">j_j_readlink(&amp;s, &amp;v14, <span class="number">0xFF</span>u);</span><br><span class="line">v7 = j_j_strstr(&amp;v14, <span class="string">"/data/data/easyre.sjl.gossip.easyre"</span>);</span><br><span class="line">v8 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( v7 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> ( v8 != v10 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(v3 + v8) ^= dest[v8];</span><br><span class="line">    ++v8;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">j_j_hook_postcall(&amp;unk_6004);</span><br><span class="line"><span class="literal">result</span> = v11;</span><br></pre></td></tr></table></figure>
<p>发现其与固定字符串异或，解出来最后答案为：<br>0ctf{It’s_More_Than_Meets_The_Eye!}</p>
<h3 id="2-vezel-apk">2.vezel.apk</h3><p>题目提示说repacking</p>
<p>打开以后，发现里面两个关键函数,getcrc()和getsig()。一个做class.dex的crc32校验，一个是获取签名信息。组合起来就为最后结果。</p>
<p>网上找了一段获取签名的代码，crc校验的随便拖到工具里就实现了。最后得到了答案。</p>
<p>记得好像是：<br>0CTF{-1839715372564639436}</p>
<p>当时错了好几次，不停的在想哪错了，原来是0CTF写成0ctf了 T_T。</p>
<h2 id="alictf_writeup">alictf_writeup</h2><h3 id="1-cake">1.cake</h3><p>反汇编以后发现就是字符串异或，得到最后答案，无奈，<br>将&amp;0xff写错了写成了^0xff。</p>
<p>半天没得到可见字符，最后得到了。</p>
<p>blow,in the winD</p>
<h3 id="2-exe逆向">2.exe逆向</h3><p>UPX壳，脱掉后，断点在GetWindowTextA，然后断下来跟踪，内存里得到答案，答案忘记了。</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="0ctf_writeup">0ctf_writeup</h2><h3 id="1-easyRe">1.easyRe</h3><p>simple.apk</p>
<p>反编译后在res/raw目录下有flag.txt文件。</p>
<p>看反编译后的代码]]>
    
    </summary>
    
      <category term="apk" scheme="http://to0rto.com/tags/apk/"/>
    
      <category term="ctf" scheme="http://to0rto.com/tags/ctf/"/>
    
      <category term="writeup" scheme="http://to0rto.com/tags/writeup/"/>
    
      <category term="ctf writeup" scheme="http://to0rto.com/categories/ctf-writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android编译源码环境配置及错误解决]]></title>
    <link href="http://to0rto.com/2015/04/06/Android%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <id>http://to0rto.com/2015/04/06/Android编译源码环境配置及错误解决/</id>
    <published>2015-04-06T07:27:55.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>主要包括</p>
<ul>
<li>配置源码编译环境(git,JDK等)</li>
<li>编译过程中遇到的错误的解决（个人认为很多）</li>
<li>adt-bundle的配置</li>
</ul>
<p>注：本人的环境</p>
<ul>
<li>ubuntu-14.04-64位系统</li>
<li>Android 4.0.1</li>
</ul>
<p>在开始之前，首先提醒大家一个<strong>重要</strong>的事情，<a id="more"></a></p>
<p><strong>如果你的ubuntu系统是虚拟机，请多分配些磁盘空间，默认的20G时不够的，android源码下载后大概16G左右，希望大家提前分配好空间。</strong>不然会像博主一样，源码下载到一半，提示空间不足，悲了个剧&gt;_&lt;。</p>
<p><strong>关于空间不足的问题</strong></p>
<p>若开始时，分配的空间不足，关于虚拟机磁盘扩容的问题，只能是再挂载一个新分区，没法做到“无缝连接”，当前磁盘空间依旧会提示磁盘不足。</p>
<p>然后折腾来折腾去，楼主只能将下好的内容拷贝出来，新建虚拟机重新分配好空间，从头开始。大家有什么好办法，可以分享给博主。</p>
<h1 id="配置源码编译环境">配置源码编译环境</h1><p>首先，下载AOSP。</p>
<h2 id="下载源码">下载源码</h2><p>参考如下网址：</p>
<p><a href="https://source.android.com/source/downloading.html" target="_blank" rel="external">https://source.android.com/source/downloading.html</a></p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$ </span>mkdir ~/bin</span><br><span class="line"><span class="char">$ </span><span class="class">PATH</span>=~/<span class="method">bin:</span><span class="char">$P</span>ATH</span><br><span class="line"><span class="char">$ </span>curl <span class="method">https:</span>//storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line"><span class="char">$ </span>chmod a+x ~/bin/repo</span><br><span class="line"><span class="char">$ </span>mkdir <span class="class">WORKING_DIRECTORY</span></span><br><span class="line"><span class="char">$ </span>cd <span class="class">WORKING_DIRECTORY</span></span><br><span class="line"><span class="char">$ </span>repo init -u <span class="method">https:</span>//android.googlesource.com/platform/manifest</span><br><span class="line"><span class="char">$ </span>repo init -u <span class="method">https:</span>//android.googlesource.com/platform/manifest -b android-<span class="number">4.0</span>.1_r1</span><br><span class="line"><span class="char">$ </span>repo sync</span><br></pre></td></tr></table></figure>
<p>此中间出现问题，还要对git进行配置</p>
<p>解决方法如下：<br>若无git，先安装<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="keyword">get</span> install git-core gnupg</span><br></pre></td></tr></table></figure></p>
<p>安装后：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user<span class="class">.name</span> <span class="string">"yourUsername"</span></span><br><span class="line">$ git config --global user<span class="class">.email</span> yourEmail@example.com</span><br></pre></td></tr></table></figure></p>
<p>其中，repo请求android.google.com等网址时，需挂VPN。<br>若无VPN的话，自行找下载链接。下载的过程很漫长，下完大概16G左右。支持断点续传repo sync。</p>
<h2 id="配置初始环境">配置初始环境</h2><p>编译需要JAVA se 1.6 安装，而不是官网说的open-jdk1.7。网上搜索到如下资料，亲试可用。</p>
<p>下载以往版本的地址如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/www.oracle.com/technetwork</span><span class="regexp">/java/javase</span><span class="regexp">/archive-139210.html</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Installing the Sun Java <span class="number">6</span> JDK <span class="keyword">in</span> Ubuntu <span class="number">14.04</span></span><br><span class="line"></span><br><span class="line">$ chmod +x jdk-<span class="number">6</span>u45-linux-x64.bin</span><br><span class="line">$ sudo ./jdk-<span class="number">6</span>u33-linux-x64.bin</span><br><span class="line">$ sudo mv jdk1.6.0_45<span class="regexp">/ /</span>usr<span class="regexp">/lib/</span>jvm/</span><br><span class="line">$ sudo update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/java java /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk1.6.0_45/</span>bin/java <span class="number">1</span></span><br><span class="line">$ sudo update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/javac javac /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk1.6.0_45/</span>bin/javac <span class="number">1</span></span><br><span class="line">$ sudo update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/javaws javaws /</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/jdk1.6.0_45/</span>bin/javaws <span class="number">1</span></span><br><span class="line">$ sudo update-alternatives --config java</span><br><span class="line">然后选择<span class="number">1.6</span>.0的java</span><br><span class="line">$ sudo update-alternatives --config javac</span><br><span class="line">同样选择包含<span class="number">1.6</span>.0的java</span><br><span class="line">$ sudo update-alternatives --config javaws</span><br><span class="line">同上选择</span><br></pre></td></tr></table></figure>
<h2 id="安装一些依赖库">安装一些依赖库</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install git gnupg flex bison gperf build-essential zip curl libc6-<span class="built_in">dev</span> libncurses5-<span class="built_in">dev</span>:i386 x11proto-core-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span>:i386 libreadline6-<span class="built_in">dev</span>:i386 libgl1-mesa-glx:i386 libgl1-mesa-<span class="built_in">dev</span> g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc zlib1g-<span class="built_in">dev</span>:i386</span><br></pre></td></tr></table></figure>
<p>执行完后，提示缺什么装什么，一般都要首先装g++-multilib，下面是官网提示安装的依赖库<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install bison <span class="keyword">g</span>++-multilib git gperf libxml2-utils <span class="keyword">make</span> zlib1g-de<span class="variable">v:i386</span> zip（官网）</span><br></pre></td></tr></table></figure></p>
<p>在.bashrc里添加<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> USE_C<span class="built_in">CACHE</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> C<span class="built_in">CACHE_DIR</span>=&lt;path-to-your-cache-directory&gt;</span><br></pre></td></tr></table></figure></p>
<p>到此就可以了。</p>
<h2 id="编译源码">编译源码</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>source build/envsetup.sh</span><br><span class="line"><span class="variable">$ </span>lunch</span><br><span class="line">选择<span class="number">1</span></span><br><span class="line"><span class="variable">$ </span>sudo make -j4</span><br></pre></td></tr></table></figure>
<h2 id="建议用低版本的gcc和g++编译">建议用低版本的gcc和g++编译</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo apt-get install gcc-<span class="number">4.4</span></span><br><span class="line"><span class="variable">$ </span>sudo apt-get install g++-<span class="number">4.4</span></span><br><span class="line"><span class="variable">$ </span>cd /usr/bin</span><br><span class="line"><span class="variable">$ </span>sudo mv gcc gcc.bak</span><br><span class="line"><span class="variable">$ </span>sudo ln -s gcc-<span class="number">4.4</span> gcc</span><br><span class="line"><span class="variable">$ </span>sudo mv g++ g++.bak</span><br><span class="line"><span class="variable">$ </span>sudo ln -s g++-<span class="number">4.4</span> g++</span><br></pre></td></tr></table></figure>
<p>然后会看到一系列的错误。整理了一下网上找到的方法，亲测可用。可通过查找来定位自己的错误。</p>
<p><strong>问题1:</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make: *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>SHARED_LIBRARIES<span class="regexp">/libdvm_intermediates/</span><span class="keyword">native</span><span class="regexp">/dalvik_system_Zygote.o] Error 1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim dalvik/vm/native/dalvik_system_Zygote.cpp添加<span class="preprocessor">#<span class="keyword">include</span> &lt;sys/resource.h&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>问题2：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">make:</span> *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>EXECUTABLES<span class="regexp">/aapt_intermediates/</span>AaptAssets.o] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim frameworks<span class="regexp">/base/</span>tools<span class="regexp">/aapt/</span>Android.mk</span><br><span class="line"></span><br><span class="line">在第<span class="number">31</span>行加上<span class="string">'-fpermissive'</span>，如下：</span><br><span class="line">LOCAL_CFLAGS += -Wno-format-y2k -fpermissive</span><br></pre></td></tr></table></figure></p>
<p><strong>问题3：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">make:</span> *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>STATIC_LIBRARIES<span class="regexp">/libutils_intermediates/</span>AssetManager.o] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim frameworks<span class="regexp">/base/</span>libs<span class="regexp">/utils/</span>Android.mk</span><br><span class="line"></span><br><span class="line">在第<span class="number">64</span>行加上<span class="string">'-fpermissive'</span>，如下:</span><br><span class="line">LOCAL_CFLAGS += -DLIBUTILS_NATIVE=<span class="number">1</span> $(TOOL_CFLAGS) -fpermissive</span><br></pre></td></tr></table></figure></p>
<p><strong>问题4：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">make:</span> *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>EXECUTABLES<span class="regexp">/grxmlcompile_intermediates/</span>grxmlcompile.o] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd external/srec</span><br><span class="line"><span class="variable">$ </span>wget <span class="string">"https://github.com/CyanogenMod/android_external_srec/commit/4d7ae7b79eda47e489669fbbe1f91ec501d42fb2.diff"</span></span><br><span class="line"><span class="variable">$ </span>patch -p1 &lt; <span class="number">4</span>d7ae7b79eda47e489669fbbe1f91ec501d42fb2.diff</span><br><span class="line"><span class="variable">$ </span>rm -rf <span class="number">4</span>d7ae7b79eda47e489669fbbe1f91ec501d42fb2.diff</span><br></pre></td></tr></table></figure>
<p><strong>问题5：</strong></p>
<p>关键字<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Can'</span>t locate <span class="constant">Switch.</span>pm <span class="keyword">in</span> <span class="variable">@INC</span> (you may need to install the <span class="constant">Switch </span><span class="keyword">module</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法:</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libswitch-<span class="keyword">perl</span></span><br></pre></td></tr></table></figure></p>
<p><strong>问题6：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">make:</span> *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>EXECUTABLES<span class="regexp">/emugen_intermediates/</span>main.o] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim development/tools/emulator/opengl/host/tools/emugen/main<span class="class">.cpp</span></span><br><span class="line">添加<span class="id">#include</span> &lt;getopt.h&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>问题7：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">make:</span> *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>STATIC_LIBRARIES<span class="regexp">/libOpenglCodecCommon_intermediates/</span>GLSharedGroup.o] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim development<span class="regexp">/tools/</span>emulator<span class="regexp">/opengl/</span>Android.mk</span><br><span class="line"></span><br><span class="line">第<span class="number">25</span>行加上 <span class="string">'-fpermissive'</span>，如下：</span><br><span class="line"><span class="string">EMUGL_COMMON_CFLAGS :</span>= -DWITH_GLES2 -fpermissive</span><br></pre></td></tr></table></figure></p>
<p><strong>问题8：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">make:</span> *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>EXECUTABLES<span class="regexp">/obbtool_intermediates/</span>Main.o] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/build/</span>core<span class="regexp">/combo/</span>HOST_linux-x86.mk</span><br><span class="line">修改第<span class="number">56</span>行，如下：</span><br><span class="line">HOST_GLOBAL_CFLAGS += -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p><strong>问题9:</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">make:</span> *** [out<span class="regexp">/host/</span>linux-x86<span class="regexp">/obj/</span>EXECUTABLES<span class="regexp">/emulator_renderer_intermediates/</span>emulator_renderer] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim development<span class="regexp">/tools/</span>emulator<span class="regexp">/opengl/</span>host<span class="regexp">/renderer/</span>Android.mk</span><br><span class="line">在第<span class="number">6</span>行之后加上，LOCAL_LDLIBS += -lX11</span><br><span class="line">如下：</span><br><span class="line"><span class="string">LOCAL_SRC_FILES :</span>= main.cpp</span><br><span class="line">LOCAL_CFLAGS    += -O0 -g</span><br><span class="line">LOCAL_LDLIBS += -lX11</span><br></pre></td></tr></table></figure></p>
<p><strong>问题10:</strong><br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make: <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> [out/host/linux-x86/obj/] ...Killed</span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br>内存分配不够。推荐2G以上。</p>
<p><strong>问题11:</strong><br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make: *** [<span class="type">out</span>/<span class="type">target</span>/<span class="built_in">product</span>/<span class="keyword">generic</span>/obj/STATIC_LIBRARIES/libext_intermediates/libxt_CONNMARK.o] Error <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法:</strong><br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">没有这个文件， bionic/libc/<span class="built_in">kernel</span>/common/linux/netfilter/xt_CONNMARK.h，执行命令：</span><br><span class="line">$ repo <span class="literal">status</span> <span class="literal">platform</span>/bionic</span><br><span class="line">检测出的确缺少几个文件，通过以下命令修复：</span><br><span class="line">$ repo forall <span class="literal">platform</span>/bionic -c git reset --hard</span><br></pre></td></tr></table></figure></p>
<p><strong>问题12：</strong><br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: redefinition <span class="keyword">of</span> <span class="symbol">'struct</span> xt_connmark_target_info'</span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong></p>
<p>注释掉 /external-iptables/extensions/libxt_connmark.c里面与/bionic/libc/kernel/common/linux/netfilter/xt_CONNMARK.h重复定义的结构体。</p>
<p><strong>问题13：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">development<span class="regexp">/tools/</span>emulator<span class="regexp">/opengl/</span>host<span class="regexp">/tools/</span>emugen/main.<span class="string">cpp:</span><span class="number">49</span>:<span class="number">47</span>: <span class="string">error:</span> ‘getopt’ was not declared <span class="keyword">in</span> <span class="keyword">this</span> scope</span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim development<span class="regexp">/tools/</span>emulator<span class="regexp">/opengl/</span>host<span class="regexp">/tools/</span>emugen/main.cpp</span><br><span class="line">在其中加入头文件:</span><br></pre></td></tr></table></figure></p>
<p><strong>问题14：</strong><br>与下列关键字有关的问题，都是结构体未定义的问题<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dereferencing pointer <span class="keyword">to</span> incomplete <span class="class"><span class="keyword">type</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br>找到出问题的结构体，要么包含含有结构体定义的头文件，要么将结构体的定义拷贝到该.c文件中。还有些头文件包含错误，在网上找到源码加到目录下，再#include就可以了。</p>
<p>本人在编译过程中自行添加了ipt_ttl.h、xt_mark.h，修改了libxt_CONNMARK.c等文件。</p>
<p>以上为我编译源码时遇到的所有错误。记录下来，希望对大家会有帮助。</p>
<p>编译成功提示如下所示:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Installed <span class="keyword">file</span> list: <span class="type">out</span>/<span class="type">target</span>/<span class="built_in">product</span>/<span class="keyword">generic</span>/installed-files.txt</span><br><span class="line"><span class="type">Target</span> system fs image: <span class="type">out</span>/<span class="type">target</span>/<span class="built_in">product</span>/<span class="keyword">generic</span>/obj/PACKAGING/systemimage_intermediates/system.img</span><br><span class="line">Install system fs image: <span class="type">out</span>/<span class="type">target</span>/<span class="built_in">product</span>/<span class="keyword">generic</span>/system.img</span><br><span class="line"><span class="type">Target</span> ram disk: <span class="type">out</span>/<span class="type">target</span>/<span class="built_in">product</span>/<span class="keyword">generic</span>/ramdisk.img</span><br><span class="line"><span class="type">Target</span> userdata fs image: <span class="type">out</span>/<span class="type">target</span>/<span class="built_in">product</span>/<span class="keyword">generic</span>/userdata.img</span><br></pre></td></tr></table></figure></p>
<p><strong>问题15:</strong><br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">g</span><span class="literal">+</span><span class="literal">+</span><span class="comment">:</span> <span class="comment">g</span><span class="literal">+</span><span class="literal">+</span><span class="comment">:</span> <span class="comment">selected</span> <span class="comment">multilib</span> <span class="comment">'32'</span> <span class="comment">not</span> <span class="comment">installed</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install g++-<span class="number">4.4</span>-multilib</span><br></pre></td></tr></table></figure></p>
<h2 id="测试编译好的img">测试编译好的img</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo apt-get install android-tools-fastboot</span><br><span class="line">在.bashrc文件里，添加export <span class="constant">ANDROID_PRODUCT_OUT</span>=<span class="regexp">/home/yourself</span><span class="regexp">/WORKINGDERICTORY/out</span><span class="regexp">/target/product</span><span class="regexp">/generic，目录换成你自己的目录</span></span><br></pre></td></tr></table></figure>
<p>然后执行emulator会提示错误。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">$ setpaths</span><br><span class="line">$ <span class="built_in">set</span>_stuff_<span class="keyword">for</span>_environment</span><br></pre></td></tr></table></figure></p>
<p>执行以上命令后基本就可以了。<br>若出现以下问题：</p>
<p><strong>问题16：</strong><br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NAND</span>: could <span class="keyword">not</span> <span class="keyword">open</span> <span class="keyword">file</span> /home/ugu3ss/AOSPworkingdirectory/<span class="keyword">out</span>/target/product/<span class="keyword">generic</span>/system.img, Permission denied</span><br><span class="line"><span class="keyword">NAND</span>: could <span class="keyword">not</span> <span class="keyword">open</span> <span class="keyword">file</span> /home/ugu3ss/AOSPworkingdirectory/<span class="keyword">out</span>/target/product/<span class="keyword">generic</span>/userdata.img, Permission denied</span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd <span class="type">out</span>/<span class="type">target</span>/<span class="built_in">product</span>/<span class="keyword">generic</span></span><br><span class="line">$ chmod <span class="number">755</span> system.img</span><br><span class="line">$ chmod <span class="number">755</span> userdata.img</span><br></pre></td></tr></table></figure></p>
<p><strong>问题17:</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">emulator:</span> <span class="string">ERROR:</span> bad <span class="string">workspace:</span> cannot find prebuilt kernel <span class="string">in:</span> <span class="regexp">/home/</span>ugu3ss<span class="regexp">/AOSPworkingdirectory/</span>prebuilts<span class="regexp">/qemu-kernel/</span>arm/kernel-qemu-armv7</span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法：</strong><br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自行添加参数，指定<span class="built_in">kernel</span>，</span><br><span class="line">emulator -<span class="built_in">kernel</span> prebuilt/android-arm/<span class="built_in">kernel</span>/<span class="built_in">kernel</span>-qemu-armv7</span><br></pre></td></tr></table></figure></p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mksdcard -l mySdCard <span class="number">1024</span>M mySdCardFile.img</span><br><span class="line">$ emulator -<span class="built_in">kernel</span> prebuilt/android-arm/<span class="built_in">kernel</span>/<span class="built_in">kernel</span>-qemu-armv7 -sdcard mySdCardFile.img</span><br></pre></td></tr></table></figure>
<p>最后运行成功，成功打开模拟器。<br><img src="/Users/toOrto/Documents/gitbook/picture/" alt="1"></p>
<p>mark:emulator -help-build-images</p>
<h1 id="配置adt">配置adt</h1><p>下载adt-bundle的网址：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">linux <span class="number">64</span> <span class="string">bit:</span> <span class="string">http:</span><span class="comment">//dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip</span></span><br><span class="line">linux <span class="number">32</span> <span class="string">bit:</span> <span class="string">http:</span><span class="comment">//dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip</span></span><br><span class="line">MacOS <span class="string">X:</span> <span class="string">http:</span><span class="comment">//dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip</span></span><br><span class="line"><span class="string">Win32:</span> <span class="string">http:</span><span class="comment">//dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip</span></span><br><span class="line"><span class="string">Win64:</span> <span class="string">http:</span><span class="comment">//dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip</span></span><br></pre></td></tr></table></figure></p>
<p>解压后：</p>
<p>编辑： vim ~/.bashrc</p>
<p>在文件最后添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Android PATH</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/home/yourname/android-sdk-linux</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<p>其中，ANDROID_HOME是你自己SDK目录名，且为完整路径。修改完成后保存。</p>
<p>生效：source ~/.bashrc</p>
<p>到此为止就配置好了。</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要包括</p>
<ul>
<li>配置源码编译环境(git,JDK等)</li>
<li>编译过程中遇到的错误的解决（个人认为很多）</li>
<li>adt-bundle的配置</li>
</ul>
<p>注：本人的环境</p>
<ul>
<li>ubuntu-14.04-64位系统</li>
<li>Android 4.0.1</li>
</ul>
<p>在开始之前，首先提醒大家一个<strong>重要</strong>的事情，]]>
    
    </summary>
    
      <category term="AOSP" scheme="http://to0rto.com/tags/AOSP/"/>
    
      <category term="Android" scheme="http://to0rto.com/tags/Android/"/>
    
      <category term="Ubuntu" scheme="http://to0rto.com/tags/Ubuntu/"/>
    
      <category term="adt" scheme="http://to0rto.com/tags/adt/"/>
    
      <category term="编译源码" scheme="http://to0rto.com/tags/%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81/"/>
    
      <category term="Android" scheme="http://to0rto.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sctf2014 APK题]]></title>
    <link href="http://to0rto.com/2014/12/08/sctf2014/"/>
    <id>http://to0rto.com/2014/12/08/sctf2014/</id>
    <published>2014-12-08T13:06:19.000Z</published>
    <updated>2015-05-14T07:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>那个时候，只会用android简单地反编译工具，<br>写的writeup 也比较挫~ 贴下来，纪念一下我的FirstBlood。当时这个题刚出来时为200分，后来由于长时间没人出，变成了400分。<br>后来主办方出题人问了我一下解题思路。结果和他想的不一样~ 他本想让大家动态分析，结果。。<br><a id="more"></a><br>不会动态分析的我，默默地静态分析：</p>
<p>下载下来是个APK文件。</p>
<p>解压，Dex2jar反编译，得到源码，看MainActivity.java</p>
<p>其中加载了so文件，调用了func函数</p>
<p>当func函数返回为真，则可toast出Flag。</p>
<p>于是取出so文件，分析func函数，</p>
<p>先通过IDA查看字符串，然后解密各个字符串，基本上都是-1，-2，-3简易加密的。<br>输入的字串，</p>
<p>第一次变换 是 与自己所在的标号异或。</p>
<p>第二次变换 可能是syc（对应长度为6）和xctf（对应长度为9）两种之一，做了下移位。</p>
<p>第三次变换是 对大写字母，小写字母，和除此之外其他情况做了处理，得到的字符串的前11位可以通过解方程得到，GoodCracK3R。</p>
<p>11位之后的数，经过处理后又和a8e5588f7e3f758比较，相等才返回1，</p>
<p>由于总共15位，那肯定是8位输入，才能对应15或16位，于是把这8位暴力跑了一下，测试了下结果。</p>
<p>和前面的GoodCracK3R结合起来，为”GoodCracK3R;{0jN|B6”，</p>
<p>然后倒推第二次变换和第一次变换，</p>
<p>就可推出KEY</p>
<p>FLAG：xctf{hgJ7Q=|8a\wV;A~}}Wc}</p>
<p>转载请注明出处，欢迎添加友链<a href="http://to0rto.com" target="_blank" rel="external">to0rto.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>那个时候，只会用android简单地反编译工具，<br>写的writeup 也比较挫~ 贴下来，纪念一下我的FirstBlood。当时这个题刚出来时为200分，后来由于长时间没人出，变成了400分。<br>后来主办方出题人问了我一下解题思路。结果和他想的不一样~ 他本想让大家动态分析，结果。。<br>]]>
    
    </summary>
    
      <category term="apk" scheme="http://to0rto.com/tags/apk/"/>
    
      <category term="ctf" scheme="http://to0rto.com/tags/ctf/"/>
    
      <category term="writeup" scheme="http://to0rto.com/tags/writeup/"/>
    
      <category term="ctf writeup" scheme="http://to0rto.com/categories/ctf-writeup/"/>
    
  </entry>
  
</feed>